"""
Common ftp ufsi implementation utility functions.

TODO: escape paths when sent - ie cater for spaces, paths begining
with a '-'

"""

import ufsi

import ftplib
import re

def _raisePathNotFoundError(e,path):
    raise ufsi.PathNotFoundError('Path "%s" not found.'%path,e)


def handleException(e,path):
    """
    Handles any exceptions that are generated by the ftp ufsi
    implementations.
    """
    # 5xx errors
    if isinstance(e,ftplib.error_perm):
        # TODO: better knowledge of why access was denied
        # TODO: perhaps match 'access.+denied'?
        if str(e).startswith('550'):
            _raisePathNotFoundError(e,path)
        #if str(e).startswith('

    raise e


def getFtpConnection(path):
    """
    Handles creating an FTP connection and returning the ftp
    object. Mainly sorts out the authentication stuff and logs the
    user in.
    """
    # get the various parts required to perform the open
    s=path.split()
    host=s['host']
    port=(s['port'] or 0)

    # get some authorisation information
    user=s['user']
    password=s['password']
    auth=path.getAuthentication()
    if auth is not None:
        if isinstance(auth,ufsi.UserPasswordAuthentication):
            user=auth.getUser()
            password=auth.getPassword()
        else:
            raise ufsi.UnsupportedAuthenticationError(
                    'FTP only uses user,password authentication')

    # open the connection and log in
    ftp=ftplib.FTP()
    # TODO: URGENT Remove after finished testing
    #ftp.set_debuglevel(2)
    ftp.connect(host,port)
    ftp.login(user,password)

    return ftp
    
    

def getDirList(ftp,d):
    """
    Parses a list returned from the ftp LIST command (in UNIX mode, MS
    DOS mode is coming...). Returns it as a dict of dicts, where each
    inner dict contains some details about the file where the filename
    is the key for the outer dict.

    You can also pass a file path instead of a dir path and just get
    info for that file.
    """
    sock=ftp.transfercmd('LIST '+d)
    f=sock.makefile('r')
    s=f.read()
    f.close()
    sock.close()
    ftp.voidresp()

    # TODO: are there any users or groups with a space?
    # date of the form: Aug 22 20:09 
    # perhaps take into account sizes with commas?
    # TODO: cater for symlinks fname -> path 
    unixListItem='(?P<permissions>[a-z\\-]+)\s+'\
                 '(?P<hardLinks>[0-9]+)\s+'\
                 '(?P<owner>\S+)\s+'\
                 '(?P<group>\S+)\s+'\
                 '(?P<size>[0-9]+)\s+'\
                 '(?P<date>[A-Za-z]+\s+[0-9]+\s+[0-9:]+)\s+'\
                 '(?P<fileName>.+)'
    unixListItemRe=re.compile(unixListItem)
    items={}
    for l in s.splitlines():
        mo=unixListItemRe.match(l)
        # skip any entries that don't match (some ftp servers include
        # header or footer lines)
        if mo is None:
            continue
        d=mo.groupdict()
        fileName=d['fileName']
        del d['fileName']
        items[fileName]=d
        
    return items


