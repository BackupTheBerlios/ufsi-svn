"""
Common ftp ufsi implementation utility functions.

"""

import ufsi

import ftplib
import re

def _raisePathNotFoundError(e,path):
    raise ufsi.PathNotFoundError('Path "%s" not found.'%path,e)


def handleException(e,path):
    """
    Handles any exceptions that are generated by the ftp ufsi
    implementations.
    """
    # 5xx errors
    if isinstance(e,ftplib.error_perm):
        # TODO: better knowledge of why access was denied
        # TODO: perhaps match 'access.+denied'?
        if str(e).startswith('550'):
            _raisePathNotFoundError(e,path)
        #if str(e).startswith('

    raise e


def getFtpConnection(p):
    # get the various parts required to perform the open
    s=p.split()
    host=s['host']
    port=(s['port'] or 0)

    # get some authorisation information
    user=''
    password=''
    auth=p.getAuthentication()
    if auth is not None:
        if isinstance(auth,ufsi.UserPasswordAuthentication):
            user=auth.getUser()
            password=auth.getPassword()
        else:
            raise ufsi.UnsupportedAuthenticationError(
                    'FTP only uses user,password authentication')

    # open the connection and log in
    ftp=ftplib.FTP()
    ftp.connect(host,port)
    ftp.login(user,password)

    return ftp
    
    

def getDirList(ftp,d):
    """
    Parses a list returned from the ftp LIST command (in UNIX mode, MS
    DOS mode is coming...). Returns it as a list of dicts, where each
    dict contains some details about the file along with the fileName
    field.
    TODO: it would probably be more useful to return a dict with
    fileName keys.

    You can also pass a file path instead of a dir path and just get
    info for that file.
    """
    sock=ftp.transfercmd('LIST '+d)
    f=sock.makefile('r')
    s=f.read()
    f.close()
    sock.close()
    ftp.voidresp()

    unixListItem='(?P<permissions>[a-z\\-]+)\s+'\
                 '(?P<hardLinks>[0-9]+)\s+'\
                 '(?P<user>[A-Za-z\\-]+)\s+'\
                 '(?P<group>[A-Za-z\\-]+)\s+'\
                 '(?P<size>[0-9]+)\s+'\
                 '(?P<date>[A-Za-z]+\s+[0-9]+\s+[0-9:]+)\s+'\
                 '(?P<fileName>.+)'
    unixListItemRe=re.compile(unixListItem)
    items={}
    for l in s.splitlines():
        mo=unixListItemRe.match(l)
        assert mo is not None
        d=mo.groupdict()
        fileName=d['fileName']
        if fileName in ('.','..'):
            continue
        del d['fileName']
        items[fileName]=d
        
    return items


